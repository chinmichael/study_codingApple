1. Destructuring(패턴 매칭)

const arr = [2,3,4,5];

const a = arr[0]; const b = arr[1];

const [a, b, c = 10] = [2, 3]; // c처럼 default 할당 값을 지정할 수도 있다.
const [a,b,c] = arr; // 지정이 안된 부분은 undefined가 되고 지정한 부분까지 변수에

===========

const obj = {
    name: 'kim',
    age: 19,
    greeting: function() {

    }
}

const name = obj.name;

const {name, age, greeting} = obj;

const {name = 'chin', age : 나이 = 31, greeting: sayHi} = obj; // 마찬가지로 default 지정가능 + 해당 키에 대한 변수명을 :을 이용하여 변경할 수 있따.


이런식으로 객체 요소를 변수로 저장할 때 좀 더 직관적이고 간편하게 만드는 방법
Array는 순서를 맞춘다면 Object는 key 이름을 맞춘다.
>> 그럴만도 한게 Array는 index로 메모리 주소를 계산한다면 Object는 아마 해시테이블을 이용해 key로 찾아가니까 순서랑 상관이 없지


>> 라이브러리에서 함수 등을 가져올 때도 잘 써먹는다.

===========

역으로 변수의 값을 object에 넣을 경우

const name = 'kim';
const age = 30;

const obj = {name: name, age: age}; 로 사용하던 것을 축약해

>> const obj = {name, age};로 변경이 가능하다.


============

함수의 파라미터를 만들때도 사용이 가능하다

const obj = {name: 'chin', age: 29};

function func({name, age}) {
    console.log(})
}

func(obj)

이렇게 파라미터 객체를 변수로 Destructuring이 가능하다. (같은 방법으로 Array도 가능)


=============

const obj = {
    body: {
        height: 180,
        weight: 65
    },
    size: ['L', 28]
}

const {
    body: {
        height, weight
    },
    size: [shirts, pants]
} = obj;

이런식으로 형태, 구조만 맞춰주면 다양하게 쓰일 수 있다.