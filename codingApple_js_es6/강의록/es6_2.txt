1. ES6에서 업그레이드 된 function의 default 파라미터

function sumFunc(a, b) {
    console.log(a + b);
}

sumFunc(1);

JS 기본 function 이상한 특징 1.

함수 실행시 파라미터 개수가 맞지 않더라도 에러가 발생하지 않음 >> JAVA같은거에선 상상도 못하지 ㄷㄷ

>> 대신 es6부터 default 파라미터를 넣을 수 있다. (굳이 if문을 쓰지 않아도 직관적 사용 가능)
>> defualt 파라미터로는 연산이나 파라미터 변수, return값이 있는 함수도 가능하다.

function sumFunc(a, b = 10) {
    console.log(a + b);
}

sumFunc(1); 을 하면 콘솔에 11이 나온다 (b에 파라미터가 안들어와 자동으로 10이 채워짐) >> React Reducer에서도 쓰지
참고로 default값이 있으므로 sumFunc을 하면 NaN(Not a Number)으로 숫자끼리 연산이 안 이뤄진 결과가 나온다.

function sumFunc(a, b = 2 * 5) {
    console.log(a + b);
}
추가적으로 위와 같은 연산도 된다.

function sumFunc(a, b = 2 * a) { >> 당연 이렇게 같은 파라미터 변수를 연산에 쓰거나, b = multiFunc() 처럼 함수를 넣을 수 있다. (물론 반환값이 있는 함수어야 함)
    console.log(a + b);
}


============================================================================================================

2. es5지만 유용한 arguments >> 하지만 es6에서는 더 편리한 rest가 나온다...

JS에서 Parameter, Argument를 가끔 구분해서 부를때

function func(a, b, c) { << 얘를 Parameter
    console.log(a, b, c); << 얘를 Argument
}

이때, JS에서 함수 Parameter를 한번에 싸잡아 다룰 필요가 있는 상황에서 사용하는 keyword : arguments : 파라미터 정보를 담은 배열 (정확히 배열은 아님)

function func(a, b, c) {
    console.log(arguments); >> 정보 확인
}

arguments[index]로 파라미터 값을 각 꺼내올 수 있음

function func(a, b, c, d, e, f) {
    for(let i=0; i<arguments.length; i++) {
        console.log(arguments[i]);
    } // 이렇게 하거나

    // arguments.forEach(e => console.log(e)); >> arguments는 정확히는 그냥 Array가 아니기에 forEach같은 함수 사용이 안된다.
}


============================================================================================================


3. es6 : Rest Parameter

기존 arguments 단점 극복이 됨 + 매우 동적으로 파라미터 세팅이 됨

... 의 의미 : 1. spread operator, 2. rest parameter

function func(...resttest) { 
    console.log(resttest);
}

func(1,2,3,4,5,6,7);을 하면 해당 파라미터들이 arguments와 같은 유사 Array가 아니라 1)진짜 Array로 묶인다. >> 즉 forEach와 같은 배열관련 함수들을 사용이 가능하다!!

즉 함수 정의 시 ...rest 로 파라미터를 정의하면 이후 2)동적으로 들어온 파라미터들에 대해 Array로 감싸 사용이 가능하다. >> 다시보니 JS자체가 애초에 동적으로 받을 수 있어서 arguments도 사용은 가능 대신 rest가 더 효율적
동시에
arguments는 일단 들어온 파라미터를 전부 담지만, rest는 함수 정의시 세팅된 영역에 대해서만 담기 때문에

function func(a,b,...rest) {
    console.log(a);
    console.log(b);
    console.log(rest);
}
이렇게 필요에 따라 3)간편히 영역 지정이 되는 효율성도 확보된다.


대신 rest parameter의 중요한 주의점 (말그대로 rest, 나머지 의미임 무슨 representational state transfer 이런거 아님)
>> 뒤의 모든 파라미터를 의미하므로 rest parameter의 위치는 최후미에 둬야함 (다른 파라미터를 뒤에 더 넣음 안됨) (...rest, a, b) 안됨
>> 마찬가지로 rest파라미터를 여러개 둘 수 없음(...rest1, ...rest2) 안됨

===============================================================================================================================

Exercise Tip)
1)
function sumFunc(a, b = 2 * 5) {
    console.log(a + b);
}

func(1, undefined); >> undefined된 부분은 default값이 뜸 >> 지정 안된 영역은 undefined 취급됨

2)
function makeArray1(...rest) {
    return rest;
}
function makeArray2() {
    let arr = [];
    arr.length = arguments.length;
    for (let i = 0; i < arguments.length; i++) {
        arr[i] = arguments[i];
    }
    return arr;
}
var newArr1 = makeArray1(1, 2, 3, 4, 5);
console.log(newArr1);

var newArr2 = makeArray2(1, 2, 3, 4, 5);
console.log(newArr2);

해보니 애초에 javascript가 파라미터를 동적으로 받는게 되므로 arguments도 처리가 됨 대신 rest가 더 효율적일뿐


3) JS에서도 Math. 란 패키지에 sqrt나 max와 같은 JAVA와 비슷한 내장함수가 들어가 있다!!


★☆★ 저번 spread operator할때 오브젝트 내에 변수로 특정 key에 변수를 지정할 때 {[key]: value}을 이야기했지만

추가적으로 할당 이후에도 변수로 key를 지정할 수 있음
기존 object.key = value; 였다면 key를 변수로 사용할 때는 Array처럼 object[key] = value;을 하면 됨. 물론 object['key'] = value;도 됨

4) Array.join() 함수를 사용하면 하나의 문자열로 합칠 수 있음


===============================================================================================================================
===============================================================================================================================

4. JS 데이터 타입 >> Java처럼 Primitive, Reference 타입이 있음

Number, Stringd는 Primitive : 변수가 가리키는 메모리 주소에 값이 그대로 저장됨 (Java는 char은 기본형 String은 참조형이지만)

Array, Object는 Reference : 할당을 시킨 변수가 가리키는 메모리에 저장된 값이 Reference(참조주소) 가 저장됨

실제 Array, Object의 데이터들이 저장된 메모리 주소가 변수에 대입된다.

let name1 = 'chin';
let name2 = name1;

이런식으로 기본형을 대입하면 주소가 아니라 그 값이 대입된다.
따라서 name1 = 'cho';로 재할당해도 name2를 로그에 찍으면 chin이 나온다. (Java와 달리 JS는 문자열도 기본형)

let origin = {name: 'chin'};
let swallow = origin;

이런식으로 참조형을 대입하면 그 값이 아니라 주소가 대입된다.
즉 얕은 복사가 일어나 두 변수가 같은 오브젝트(혹은 배열)을 가리킨다.
따라서 origin.name = 'cho';로 바꾸면 swallow.name도 'cho'가 된다.

따라서 swallow copy가 이뤄질 수 있는 Array, Object의 복사는 매우 주의해야 한다.

let obj1 = {name: 'chin'};
let obj2 = {name: 'chin'};

이 경우는 obj1와 obj2가 전혀 다른 Object의 주소값이 할당된다.
따라서 obj1.name='cho'로 해도 obj2.name은 아직 'chin'이다

마찬가지로 주의해야할 점은 함수에서 참조변수 파라미터로 받으면

const objOrigin = {name: 'chin'};

function canChange(obj) {
    obj.name = 'cho';
}
canChange(objOrigin)
로 한다면 파라미터로 받아오 참조변수의 주소에서 해당 key의 value를 바꾸는 것이므로 무사히 처리가 되어 objOrigin.name 값이 바뀌지만

function cannotChange(obj) { // 함수 정의에서 파라미터도 어떻게 보면 일종의 변수 선언이 되고(함수내 var로) 실행시 할당받아오는 것이므로
    obj = {name: 'kim'};
}
cannotChange(objOrigin);
이 경우는 함수내에서 파라미터 변수 obj에 새로운 오브젝트 주소가 재할당 되는 것으로 처음 파라미터에 넣은 objOrigin이 가리키는 오브젝트와는 아무런 상관이 없게 된다.
따라서 objOrigin.name값은 바뀌지 않게 된다.



그리고 이런 Array, Object는

let origin = {name: 'chin'};
let originArr = [1,2,3]'

let middle = {...origin};
let middleArr = [...originArr];
로 spread를 사용하면 비교적 깊은 복사를 할 수 있지만 만약 origin, originArr이

let origin = {names: ['chin', 'cho], school: {high:[~]}}, originArr = [1,2,{}] 이런식으로 내부 요소들도 참조형인 경우는 단순 spread operator로 deep copy가 되지 않는다.
왜냐하면 한 번 풀어져서 묶인다고 해도 요소들의 값이 주소값이기 때문에 같은 참조형을 가리키기 때문이다.

let originArr = [1,2,3,{name:'chin'}];
let copyArr = [...originArr];

originArr[3].name = 'cho';
console.log(copyArr[3].name); // chin가 아닌 cho가 나온다


Tip) 중요한 점

Java는 이차원 이상 배열도 int[][] arr = {{1,2,3}, {1,2,3}}; 이런식으로 정의하여 arr[0][2] 사용이 가능하지만

JS는 Array 안에 Array를 포함, 데이터나 여러 객체를 넣을 수는 있지만, Java처럼 arr[index][index] 이런식으로 가져오는 것이 불가능하다.
따라서,
const arr = [[1,2],[3,4]];
여기서 값을 가져오려면
let tmp = arr[0];
tmp[1] 이렇게 가져온다. 만약 반복문을 돌린다면 이런 사항을 체크하면 되고,

만약 초기값 할당이 없이 new 연산자를 통해 Java처럼 int[][] arr = new int[3][4];선언만 한다면,
let arr = new Array(3); // Java에서는 초기 사이즈 배열 선언을 이런식으로 해주는구나...
for(let i=0; i<arr.length; i++) {
    arr[i] = new Array(4);
}

이렇게 지정해준다. .forEach()나 .map()을 쓰고 싶지만 얘들은 초기화되지 않은 공간을 스킵하기 때문에 불가능하다... (이게 장점이기도 하지만)
대신 for문은 조건에 따라서 break; 전까지 전부 순회하기에... (참고로 forEach, map은 또 break;로 순회중단이 불가능하다)
그리고 map은 forEach와 달리 callback에서 return 값들을 가지고 새로운 배열을 반환한다. (따라서 callback에 return문이 없다면 반환된 arr내부요소가 죄다 undefined)

만약 함수로 이차원 배열 생성을 한다면

function create2DArray (row, column) {
    let arr = new Array(row);
    for(let i=0; i<arr.length; i++) {
        arr[i] = new Array(column);
        let inner = arr[i];
        for(let j=0; j<inner.length; j++) {
            inner = 0;
        } // 초기화까지 시킬 경우
    }

    return arr;
}
이렇게 짜면 된다.

아니면 es6에서 사용되는 Array.from() 과 .fill() 함수를 이용해 생성과 초기화를 할 수 있다.
Array.from()의 첫 파라미터는 String, Array, Map, Set 등의 반복 가능한 객체고 두번째 파라미터로 해당 파라미터요소를 돌며 실행할 callback함수로 하여 배열을 만들어낸다.
즉 반복 가능 객체를 가지고 배열을 만드는 함수임

즉 const arr2D = Array.from(Array(3), e => e = new Array(4)); 로 생성할 수 있다.
    const arr2D = Array.from(Array(3), e => e = new Array(4).fill(0)); 로 초기화까지 가능 있다.


===============================================================================================================================
===============================================================================================================================

여기부터 OOP 적인 부분이 한동안 나옴

5. constructor : 형태는 조금 다르지만 생성자 >> 즉 new 연산자를 가지고 정의된 템플릿(자바는 class)의 오브젝트(인스턴스)를 생성하게 해주는 함수

>> Java는 class로 정의되어 각 instance 객체가 생성되고 생성자는 클래스 안에 존재함

>> JS의 경우는 Object 데이터들이 객체라고 생각하면 된다. 실제로 Object 안에 있는 함수가 객체의 행위를 나타내는 메서드로 불리고
>> 그리고 이런 Object 인스턴스를 생성하도록 정의된 함수가 constructor 즉 기존 Java의 OOP 적으로 충분히 이해가 가능하다 (방법은 좀 다르지만)

예를들어 다음과 같은 상황에서 Java처럼 DTO(Data Type Object)를 만들어낼 수도 있다.

var person1 = {name:'kim' age: 15};
var person2 = {name:'chin' age: 16};
var person3 = {name:'cho' age: 12};
... 이렇게 하지말고

관습적으로 constructor는 대문자로 이름을 생성한다. + 그리고 function으로 정의해야함 (왜냐면 기존 this 의미할 때처럼 오브젝트의 멤버들 설정을 위해서 constructor function의 this 정의가 필요하니까)

function Person(name) {
    this.name = name; // constructor function의 this는 인스턴스를 지정
    this.age = 15;

    this.greeting = function() {
        console.log(`Hi, I'm ${this.name}!`);
    }
}

const person1 = new Person('kim', 15);
const person2 = new Person('chin', 16);

>> 어떻게 보면 자바에서 커스텀하여 정의하던 생성자와 거의 동일하다 (심지어 인스턴스 자신을 가리키는 this이기도 하고)
>> 여기서도 key 값들이 함수가 아니라 데이터면 속성이라고도 부르므로 (자바의 멤버변수도 속성이지)


===============================================================================================================================
===============================================================================================================================

6. prototype (참고로 이것도 일종의 오브젝임 머 당연하지만...)

일단 JS에서는 인스턴스 생성할 때 constructor로 template를 찍는것도 상속(inheritance)이라고 표현한다.

function Person(name) {
    this.name = name; // constructor function의 this는 인스턴스를 지정
    this.age = 15;

    this.greeting = function() {
        console.log(`Hi, I'm ${this.name}!`);
    }
}

위와 같이 생성자로서 부모를 만든 뒤,
JS에서 구현할 수 있는 또 하나의 문법이 prototype

>> JS는 생성자에 prototype이라는 내부 Object가 자동적으로 생긴다.
>> Person.prototype.key 으로 생성자.프로토타입.속성(or 메서드)로 오브젝트 형식으로 사용이 가능하다
>> Java에서 생각하면 super시킬 수 있는 값들을 지정이 가능하다고 보면됨

따라서

function Person(name, age) {
    this.name = name; // constructor function의 this는 인스턴스를 지정
    this.age = age;
    this.greeting = function() {
        console.log(`Hi, I'm ${this.name}!`);
    }
}

Person.prototype.gender = 'male';
로 하면 프로토타입 할당 이전에 생성한 인스턴스를 포함, 해당 생성자로 생성한 모든 인스턴스에 해당 속성과 값(혹은 메서드)가 추가된다.

물론 person1.gender = 'female';로 각 인스턴스 마다 super값을 변경할 수 있다.

즉 생성자 정의 이후 인스턴스 전체에 공통으로 상속시켤 적용될 내역 수정에 prototype을 사용할 수 있다.

JS도 해당 인스턴스 검토할 때 만약 없는 속성이 코드에 사용되면 그 다음으로 상속을 시킨 오브젝트에 해당 속성이 있는지 체크한다.
만약 없는데 찾으면 undefined고 대입하는 경우는 추가하는 거

이런 상속검사는 단계적으로 부모를 올라감

Object, Array에 붙일 수 있는 JS의 .toString() 을 사용할 수 있는가?
이건 해당 데이터 타입의 상위 오브젝트의 prototype을 거슬러 올라가면 해당 메서드가 있기 때문에 사용이 가능한 것

const arr = [1,2,3];
우리가 이런식으로 간략히 선언 할당하는 경우 실제 컴퓨터는
const arr = new Array(1,2,3); 으로 생성한다. << 즉 Array 생성자로 새로운 오브젝트를 생성한 것

그리고 해당 생성자의 프로토타입에 배열 함수들이 있기에 sort(), map(), forEach() 이런걸 쓸 수 있는것

물론 Object도
const obj = new Object();로 생성되는 것

그래서 mozila에서 sort() 설명이 Array.prototype.sort() 항목에 있는 것 (그니까 먼가 이런 함수 있지 않을까 하면 Array.prototype을 콘솔에 찍어보자)

이건 뭐 Java에서 Object에 있는 메서드를 모든 객체에서 사용할 수 있는 그런거지


JS prototype 특성

1. 당연한 이야기지만 객체를 생성하는 생성자 함수 들에만 존재 (Array(), Object() 등 포함)
    >> 대신 생성된 인스턴스에 인스턴스.__proto__를 치면 상위요소=prototype을 체크할 수 있음
        (실제 콘솔로그에 인스턴스를 찍으면 __proto__ 부분이 있음을 확인 가능 >> 참고로 생성자.prototype으로 __proto__를 확인하면 이는 Object()을 상속한 것을 확인 가능)
        >> Java의 모든 객체 최고조상이 Object클래스인것처럼 JS도 모든 함수 자료형의 조상은 Object() (Array()도 Object()를 조상으로 취한다)

    >> 참고로 __proto__ 키워드를 이용하면 그냥 일반적인 인스턴스나 그냥 정의된 오브젝트 데이터를 상위요소로 하여 상속시켜버릴 수 있다.
    ex  const obj1 = {name: 'kim'};
        const obj2 = {};
        obj2.__proto__ = obj1;
        console.log(obj2.name);

        >> 근데 이 부분은 es5의 Object.create()가 나을 수 있다 >> 그밖에 기존의 constructor나 class를 쓰던가



Exercise Tip)

배열의 특정값을 제거해주는 함수만들기

내장 함수 안쓰면

Array.prototype.removeValue = function(value) {
    let newArr = [];
    this.forEach(e => {
        if(e != value) {
            newArr.push(e);
        }
    });

    return newArr;
}

filter를 쓴다면

Array.prototype.removeValue = function(value) {
    return this.filter(e => (e != value));
}

근데 이 두 방식은 this 자체를 수정하는게 아닌 새로운 배열을 반환해 저장해야 하므로
const로 지정된 상수를 변경하거나 하는 등의 방식이 안된다.

splice(ind, 범위)는 배열에서 해당 범위를 '추출'해 새 배열을 반환하므로,
반환값을 사용하지 않고 this 자체의 요소를 삭제하는데에도 사용한다.

Array.prototype.removeValue = funtion(value) {
    for(let i=0; i<this.length; i++) {
        if(this[i] === value) {
            this.splice(i, 1);
            i--; // 주의할 점은 뒤의 요소가 땡겨져 오므로 검색 idx도 앞으로 땡겨져야한다.
        }
    }
}
를 하면 자체적으로 내부에 해당 요소가 추출되어 빠진다


===============================================================================================================================
===============================================================================================================================


7. Object.create()으로 상속처리 >> constructor, prototype은 예전 문법 그나마 Object.create는 es5문법

Object.create(prototype); >> prototype으로 사용될 Object를 파라미터로 하여 인스턴스를 생성

const parent = { name: 'kim', age: 50 };

const child = Object.create(parent);

child.age = 14;

console.log(child.name, child.age);

===============================================================================================================================

8. class 상속처리 : es6 문법 >> Java의 객체지향 생각하면 편하다.
위에꺼는 그냥 prototype 지정 함수라면 (생성자조차 아님 이건 ㄹㅇ 클래스 제작)

class Parent {

    constructor(name = 'chin', age=20) { // class의 생성자는 Java와 달리 생성자명이 아닌 전용함수 constructor를 사용
        this.name = name;
        this.age = age;

        this.greeting = function() {
            console.log(`안녕 내 이름은 ${this.name}이야`); // 메서드 만드는 방법은 기존처럼 생성자 함수 내부에 쓰거나
        }
    }

    this.first = 'cho';

    introduce() {
        console.log(`이름 : ${this.name}`); // Java처럼 클래스 안에 적는 방법이 있다 (function 키워드를 필요로 하지 않는다)
    }

}

인스턴스 생성은 거의 비슷하게 new 연산자 사용.

const par1 = new Parent();
const par2 = new Parent('cho', 15);

JS 메서드의 주의할 점은 기존 constructor 내부에 만든 메서드는 해당 인스턴스에 바로 추가되는 것인 반면,
Java의 메서드처럼 constructor 외부에 만든 메서드는 class에 즉 JS식으로 하면 prototype에 저장된다. (근데 this 지정자는 똑같이 인스턴스를 가리킴)

>> 2번째 방법은 prototype에 생성되는 만큼 인스턴스들이 공통적으로 접근하는 데이터 처리 메서드 등을 만드는데 좋다 일종의 내장함수 만들기


Tip) 참고로 인스턴스에서 프로토타입을 반환하는 방법은 1. 인스턴스.__proto__ 2.Object.getPrototypeOf(인스턴스); 함수 활용


이런 class 객체지향 문법을 쓰는 이유는 Java와 같음

>> 세계를 객체로 표현함에 있어 template를 정의하고 찍어내기 위함

===============================================================================================================================

9. class super, extends >> Java 생각하면 매우 편함

Java처럼 여러 클래스를 만들 때 이에 대해 공통되는 조상을 추출해서 상속시키기 위함

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    introduce() {
        console.log(`자기소개 : 이름=${this.name} 나이=${this.age}`);
    }
}

예를 들어 이런 사람이란 객체 인스턴스를 생성하는 class를 만든다면,
사람 중에서 학생이란 객체가 부분 집합으로 존재할 것임.

이 학생객체 class를 그럼 사람부분부터 다시 만드느냐? 어차피 학생은 사람이란 속성을 모두 가지므로
사람 객체를 상속시켜서 사용하는 것

이런 프로세스로 객체지향 프로그래밍에서 상속이 필요한것

class Student extends Person {
    constructor(name, age, major) {
        super(name, age);
        this.major = major;
    }

    introduce() {
        console.log(`자기소개 : 이름=${this.name} 나이=${this.age} 직업: 학생`); // 이렇게 오버라이딩이 가능하다
    }

    study() {
        super.introduce(); // constructor에서 super는 상속한 class의 생성자라면 그 외의 super는 자바처럼 상속한 class 객체, JS에서는 prototype를 의미한다.
        console.log(`${this.name}은 ${this.major}을 공부한다`);
    }

    
}

위에서 보면 super가 있는데 이는 상속시킨 상위 객체 class의 요소를 가져다 쓴다는 것임
즉 constructor에서 super를 쓰는 것은 Person에서 name과 age 속성을 지정하는 생성자를 가져와 적용시키는 것

이와 같이 만든 학생 클래스로 생성된 학생 인스턴스들은 다음과 같이 사람의 속성과 학생의 속성을 모두 쓸 수 있음

const stu = new Student('chin', 22, 'Korean Langauage and Literature');

stu.introduce();
stu.study();

★☆ 추가적으로 매우 중요한 부분으로 JS의 경우 상속한(extends) class는 그냥 this를 사용하지 못한다.
반드시 생성자 부분에 super(); 이후에 사용 가능하다. 생성자에 상속한 속성들을 가져와 지정한 뒤에 추가적인 것들은 세팅한다는것


===============================================================================================================================

10. Getter / Setter

기존에

const person = { name: 'chin' }에서 person.name 으로 속성을 사용하는 것은 == 마치 Java에서 인스턴스.멤버변수 로 객체의 속성을 꺼내 쓰는 것과 같음

따라서 Java와 마찬가지로 Getter/Setter를 사용하여 캡슐화를 사용해 좀 더 보안성과 유지보수성을 향상시킬 수 있다.
혹은 복잡한 데이터의 속성을 get or set할 때 메서드로 간단히 사용할 수 있게 하거나 value를 바꿀 때 데이터 삽입을 할때 유효성 검사를 시키는 등의 작업을 알아서 할 수가 있다.  (결국 유지보수성이지)
그리고 get할때도 원본데이터를 보존하며 원하는 형식으로 뽑아씀에 무결성 등도 확보 가능

참고로 typeof 함수를 활용하면 대체적인 타입 체크가 가능

typeof 변수 를 하면 다음과 같은 값들이 '문자열로' 반환됨
undefined (변수 선언이 안되어 있거나 할당이 안 됨)
number, string, object(array를 포함 >> 따라서 배열은 Array.isArray(변수)를 사용), function, symbol

아님 paseInt(변수); 처럼 변환 함수를 사용할 수 있음

const person = {
    name: 'chin',
    getName: function() {
        return this.name;
    }
    setName: function(name) {
        if(typeof name == 'string' ) {
            this.name = name;
        } else {
            ~
        }
    }
}

만드는 방법은 기존 Java Getter Setter 만드는 것처럼 편히 생각하면 된다.
근데 문제는 JS는 이렇게 하면 공통적으로 유지보수성은 높아지겠는데 private와 같은 접근제어자 등이 없는데 어떻게 보안성을 확보하지?? 아마 그냥 유지보수성 + 데이터의 무결성을 위한 것 같다

그리도 es5부터는 키워드를 사용해 지정하고 사용할 수 있다.

const person = {
    name: 'chin',
    get getName: function() {
        return this.name;
    }
    set setName: function(name) {
        if(typeof name == 'string' ) {
            this.name = name;
        } else {
            ~
        }
    }
}

그리고 키워드로 지정된 set, get 함수는 소괄호를 쓰지 않고 속성처럼 사용 가능하다. >> 참고로 당연히 set 함수는 파라미터가 반드시 필요하고(그리고 한개로 제한함), get은 return이 있고 파라미터가 없어야 함

person.setName = value;
console.log(person.getName);

오히려 set, get keyword를 붙이면 ()를 붙였을 때 함수가 아니라고 에러가 나옴 >> 프로퍼티화

물론 다음과 같이 class로 자바처럼 세팅할 수 있다/

class Developer extends Person {
    constructor(name, age) {
        super(name, age);
        this.skill = [];
    }

    set addSkills(skills) {
        if(Array.isArray(skills)) {
            //skills.forEach(e => {
            //    this.skill.push(e);
            //});
            this.skills = [...this.skills, ...skills];
        } else {
            console.log('스킬은 배열로 입력해주세요');
        }
    }

    get getSkills() {
        return `이 사람의 스킬은 ${this.skill.toString()}입니다.`
    }
}

const dev = new Developer('chin', 29);
dev.addSkills = ['JS', 'Java', 'React', 'CSS'];
console.log(dev.getSkills]);


// Exercise Tip

난 Dog, Cat에서 this.age의 typeof가 undefined인지 (변수가 선언 or 할당이 되었는지) 체크했지만
this.age가 있는 class 타입이 한정되었다면 JS도 Java처럼 instanceof 사용이 가능!!

객체변수 instanceof 객체타입

이렇게 bool 체크가 가능

class Animal {
    ...
    addAge() {
        if(this instanceof Cat) {
            this.age++;
        }
    }
    ...
}