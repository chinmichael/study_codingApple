1. Array Object 자료형

let arr = [object,1,"문자"];
arr[index];

>> 자바의 Object 배열을 생각해주면 된다. index로 찾는것도 동일
>> 물론 배열의 추가 확장의 문제도 비슷하게 돌아가기 때문에 배열변수.length = 크기;로 미리 사이즈를 정의하는것도 상황에 따라 필요

Object

let object = {key:value, key:value};
object.key;

>> 자바의 Map 자료형을 생각하면 된다. 식별자인 key와 대응값인 value들로 정리되어 있고
>> 변수.key로 value를 뽑아 쓰거나 값을 대입시킬 수 있다.


2. Array 주요 함수들

.push() : 배열 뒤에 파라미터 요소 추가
.unshift() : 배열 앞에 파라미터 요소 추가

.sort() : 정렬 가능
        : 만약 숫자 오름차순 정렬 등을 사용할 경우
            arr.sort((front, back) => {
                return front - back // 오름차순은 앞의 값이 더 작으니까
            });

        : 내림차순 정렬일 경우
            arr.sort((front, back) => {
                return back-front;
            });

        : 가나다, abc순 정렬을 하는 경우 JS는 문자열 비교가 >,<,=로 가능하므로

            arr.sort((front, back) => {
                const upperFront = front.toUpperCase();
                const upperBack = back.toUpperCase();

                if(upperFront > upperBack) return 1; 앞 문자가 크면 뒤로 보내고
                if(upperFront < upperBack) return -1;
                if(upperFront === upperBack) return 0;
            });

        : sort의 동작원리는 배열의 데이터요소을 차례로 비교해 return의 +,-에 따라 정렬 위치를 선정한다 (양수가 나오면 순서를 교환한다: 기본이 오름차순이기에)
        : 이는 자바에서도 사실 Comprator 들이 -1, 1로 정렬을 해가는 것과 마찬가지다


참고로 sort는 신문법이 아니기에 기본적으로 해당 배열 자체의 순서를 바꿔 저장한다.
따라서
newArr = [...arr];
newArr.sort(callback);으로 복사한 배열을 이용하는 편이 좋다.


filter(callback) : 해당 callback 조건에 해당하는 요소만 남기는 함수다
                 : sort()와 달리 신문법이라 그런지 원본 자체를 변경하지 않으므로 이를 담을 새로운 변수를 지정해 사용해야한다.

ex)
const arr = [7,3,2,4,5];
const newArr = arr.filter(e => {
    return e < 4;
}); 

return에 합치하는 2,3 요소만 남게 된다


map(callback) : 해당 요소 전체에 알아서 내부 반복을 돌려 mapping처리를 해주는 함수
              : 자바의 map(람다식)처럼 쓰면 된다.

const arr = [7,3,2,4,5];
const newArr = arr.map(e => {
    return e * 2;
}); 



=======================================================================================
=======================================================================================

1. forEach(callback) 반복문

JS에서도 for문은 Java와 마찬가지로 사용해주면 된다. for(;;) for(let i=0; i < n; i++) for(초기화; 조건; 증감)
하지만 java에서 향상된 for문 for(타입 변수 : 배열) 로 알아서 배열의 크기만큼 요소를 뽑아오듯 혹은 forEach(람다식)으로 배열의 크기만큼

arr.forEach(i => {
    console.log(i);
});

처럼 각 내부 요소의 것을 가져다 활용할때는 for문보다 쉽게 활용이 가능하다.

대신 내부 return이 없는 관계로
JSX에서 map 대신으로 사용하는 것은 안된다.


=======================================================================================
=======================================================================================


DOM, EventLisenter인 ready(), load()

1. DOM = Document Object Model

JS의 원초적인 목적은 HTML요소의 조작 하지만 JS는 HTML 문법을 직접적으로 이해할 수 없음 (당빠 언어가 다르니)
따라서 브라우저를 통해 HTML을 JS가 해석할 수 있는 일종의 Object 자료로 치환하여 JS가 사용하게 함

그래서 생성된 DOM을 통해 JS가 HTML의 정보들 id, class, style, innerHTML 등을 접근하고 사용할 수 있게됨


2. ready() : jQuery 이벤트 리스너

브라우저는 HTML을 위에서 읽어내려감 (또한 읽어가면서 해당 요소들에 대해 DOM을 생성함) + JS로 HTML을 조작하기 위해서는 DOM이 필요

따라서,
<script>
    document.getElementById('test').innerHTML = '<span>Hi!</span>'
</script>

<p id="test">temp text</p>를 하면 해당 셀렉터(#test)에 대한 DOM이 형성되지 않았으므로 에러가 발생

따라서 해당 HTML을 다 읽은 것을 알려주는 jQuery 이벤트리스너 함수가 ready()이며
$(document).ready(callback)을 하면 현재 페이지(파일)의 HTML을 다 읽어 DOM을 형성한 뒤 callback 함수를 실행하게 할 수 있다.

바닐라JS에서는

document.addEventListener('DOMContentLoaded', callback);으로 처리하면 된다. 문제는 HTML5이후기 땜에 IE9이상만 됨


3. load() : jQuery 이벤트 리스너

$().on('load', callback) : ready()가 DOM 형성된걸 체크한다면 load는 모든 파일과 이미지가 로드 되었을 때 실행시킨다.
